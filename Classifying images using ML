# -*- coding: utf-8 -*-
"""Classifying images using python and ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1debSyBS5ElZiQdDFEkcG8RCkusAtRoNV
"""

#Description : This programm will classify images using pythong and ML
#Dataset if from the University of Toronto url: https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz

#imoprt the libaries
import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout
from tensorflow.keras import layers
from keras.utils import to_categorical
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')



#load the data
from keras.datasets import cifar10
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

#look at the data types of the variables
print(type(x_train))
print(type(y_train))
print(type(x_test))
print(type(y_test))

#shape of the arrays
print('x_train shape:', x_train.shape)
print('y_train shape:', y_train.shape)
print('x_test shape:', x_test.shape) #contains 10k rows of data w 32x32 images and depth 3 (red, green, blue)
print('y_test shape:', y_test.shape) #contains 10k rows of data and 1 column

#take a look at the first image as an array
index=2135
x_train[index]

#show the image as a picture
img = plt.imshow(x_train[index])

#get the image label 
print('the image label is:', y_train[index])

#Get the image classification
classification = ['airplane', 'automobile','bird','cat','deer', 'dog', 'frog','horse', 'ship', 'truc' ]
#print the image class
print('image class is:', classification[y_train[index][0]])

#Convert the lables into a set of 10 numbers to input into the neural network
y_train_one_hot = to_categorical(y_train)
y_test_one_hot = to_categorical(y_test)

#print the new labels
print(y_train_one_hot)
#the cell contain only 0s exept for one cell with a 1 which is corresponding to the label

#print the new label of the image/picture above
print('The one hot label is:', y_train_one_hot[index])
#the label below corresponds to the number as shown in the get image line of code

#normalise the pixles to be values between 0 and 1
#see https://machinelearningmastery.com/how-to-manually-scale-image-pixel-data-for-deep-learning/#:~:text=As%20such%20it%20is%20good,pixel%20value%3B%20that%20is%20255. as reference
x_train = x_train/225
x_test = x_test/225

x_train[index]

#create the models architecture
model = Sequential()

#Add the first layer
#convolution layer to extract pictures from the input image and then create 32 5x5 feature maps
model.add(Conv2D(32, (5,5), activation='relu', input_shape=(32,32,3)))

#Add a pooling layer
#create a pooling layer with a 2x2 pxel filter, to get the max element from the feature maps 
model.add(MaxPooling2D(pool_size=(2,2)))

#Add a second convolution layer, not first layer hus get rid of input shape!
model.add(Conv2D(32, (5,5), activation='relu'))

#Add another pooling layer
model.add(MaxPooling2D(pool_size=(2,2)))

#add a flattening layer
model.add(Flatten())

#Add a layer with 1,500 neurons
model.add(Dense(1500, activation='relu'))

#Add a drop out layer
model.add(Dropout(0.5))

#Add a layer with 1000 neurons
model.add(Dense(1000, activation='relu'))

#Add a drop out layer
model.add(Dropout(0.5))

#Add a layer with 500 neurons
model.add(Dense(500, activation='relu'))

#Add a layer with 250 neurons
model.add(Dense(250, activation='relu'))

#Add a layer with 10 neurons
model.add(Dense(10, activation='softmax'))

#Compile the model
model.compile(loss='categorical_crossentropy',
              optimizer ='adam',
              metrics =['accuracy'])

#Train the model
#hist=model.fit(x_train, y_train_one_hot, batch_size=256, epochs=10,validation_split=0.2)

history=model.fit(x_train, y_train_one_hot, epochs=10, batch_size=256, verbose=2)

#Evaluate the model using the test data set
model.evaluate(x_test, y_test_one_hot)[1]

#Visualise the models accuracy
plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train','Val'], loc='upper left')
plt.show()

#Visualize the models loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train','Val'], loc='upper left')
plt.show()

#Test the model with an example
from google.colab import files
uploaded = files.upload()

#show the image
new_image = plt.imread('deer-gty-jt-191024_hpMain_4x5_992.jpg')
img =plt.imshow(new_image)

#resize the image 32x32 with depth 3
from skimage.transform import resize
resized_image = resize(new_image,(32,32,3))
img = plt.imshow(resized_image)

#Get the models predictions
predictions =model.predict(np.array([resized_image]))
#show the predictions
predictions

#sort the predictions from the least to the greatest
list_index = [0,1,2,3,4,5,6,7,8,9]
x= predictions

for i in range(10):
  for j in range(10):
    if x[0][list_index[i]]>x[0][list_index[j]]:
      temp = list_index [i] #if larger swap them
      list_index[i] = list_index[j]
      list_index[j]= temp

#Show the sorted lables in order
print(list_index)

#print the first five predictions

for i in range(5):
  print(classification[list_index[i]], ':' , round(predictions[0][list_index[i]]*100,2), '%')

#Test the model with an second example
from google.colab import files
uploaded = files.upload()

#show the image
new_image = plt.imread('92E141F8-36E4-4331-BB2EE42AC8674DD3_source.jpg')
img =plt.imshow(new_image)

#resize the image 32x32 with depth 3
from skimage.transform import resize
resized_image = resize(new_image,(32,32,3))
img = plt.imshow(resized_image)

#Get the models predictions
predictions =model.predict(np.array([resized_image]))
#show the predictions
predictions

#sort the predictions from the least to the greatest
list_index = [0,1,2,3,4,5,6,7,8,9]
x= predictions

for i in range(10):
  for j in range(10):
    if x[0][list_index[i]]>x[0][list_index[j]]:
      temp = list_index [i] #if larger swap them
      list_index[i] = list_index[j]
      list_index[j]= temp

#Show the sorted lables in order
print(list_index)

#print the first five predictions

for i in range(5):
  print(classification[list_index[i]], ':' , round(predictions[0][list_index[i]]*100,2), '%')
