# -*- coding: utf-8 -*-
"""Predicting stock prices using ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_aoEWFWtd5p2RnuNveX0jkxwOnqOisHV
"""

#Install the dependencies
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
plt.style.use('bmh')

#load the data
from google.colab import files
uploaded = files.upload()

#store the data into a data frame
df= pd.read_csv('NFLX.csv')
df.head(6) #focus on close price = close

#get the number of trading days
df.shape #we have about 1259 days

#visualise the close prize data
plt.figure(figsize=(16,8))
plt.title('Netflix')
plt.xlabel('Days')
plt.ylabel('Close Prize USD ($)')
plt.plot(df['Close'])
plt.show()

#get the close prize
df = df[['Close']]
df.head(4)

#create a variable to predict 'x' days out into the future
future_days =25
#create a new colum (target) shifted 'x' units/days up 
df['Prediction'] = df[['Close']].shift(-future_days)
df.head(4)

#create the feature data set (x) and convert it to a numpy array and remopve the last 'x' rows/days
X = np.array(df.drop(['Prediction'], 1))[:-future_days]
print(X)

#create the target data set (y) and convert it to a numpy array and get all of the target values expect the last 'x' rows/days
y =np.array(df['Prediction'])[:-future_days]
print(y)

#split the data into 75% training and 25% testing
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)

#Create the models
#Create the decision tree regressor model
tree = DecisionTreeRegressor().fit(x_train, y_train)
#create the linear regression model
lr = LinearRegression().fit(x_train, y_train)

#Get the last 'x' rows of the feature data set
x_future = df.drop(['Prediction'], 1)[:-future_days]
x_future = x_future.tail(future_days)
x_future =np.array(x_future)
x_future

#Show the model tree prediction
tree_prediction = tree.predict(x_future)
print(tree_prediction)
print()
#Show the model linear regression
lr_prediction = lr.predict(x_future)
print(lr_prediction)

#Visualise the data
prediction = tree_prediction

valid = df[X.shape[0]:]
valid['Predictions']= prediction
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Days')
plt.ylabel('Close Prize USD ($)')
plt.plot(df['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Orig','Val','Pred'])
plt.show

#Visualise the data
prediction = lr_prediction

valid = df[X.shape[0]:]
valid['Predictions']= prediction
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Days')
plt.ylabel('Close Prize USD ($)')
plt.plot(df['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Orig','Val','Pred'])
plt.show